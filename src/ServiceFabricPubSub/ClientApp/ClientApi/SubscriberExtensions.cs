// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ClientApi.Admin
{
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Subscriber.
    /// </summary>
    public static partial class SubscriberExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='topicName'>
            /// </param>
            public static object GetSubscribers(this ISubscriber operations, string tenantId, string topicName)
            {
                return operations.GetSubscribersAsync(tenantId, topicName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='topicName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscribersAsync(this ISubscriber operations, string tenantId, string topicName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscribersWithHttpMessagesAsync(tenantId, topicName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='topicName'>
            /// </param>
            /// <param name='subscriberName'>
            /// </param>
            public static object AddSubscriber(this ISubscriber operations, string tenantId, string topicName, string subscriberName)
            {
                return operations.AddSubscriberAsync(tenantId, topicName, subscriberName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='topicName'>
            /// </param>
            /// <param name='subscriberName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddSubscriberAsync(this ISubscriber operations, string tenantId, string topicName, string subscriberName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddSubscriberWithHttpMessagesAsync(tenantId, topicName, subscriberName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='topicName'>
            /// </param>
            /// <param name='subscriberName'>
            /// </param>
            public static object DeleteSubscriber(this ISubscriber operations, string tenantId, string topicName, string subscriberName)
            {
                return operations.DeleteSubscriberAsync(tenantId, topicName, subscriberName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='topicName'>
            /// </param>
            /// <param name='subscriberName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSubscriberAsync(this ISubscriber operations, string tenantId, string topicName, string subscriberName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSubscriberWithHttpMessagesAsync(tenantId, topicName, subscriberName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
