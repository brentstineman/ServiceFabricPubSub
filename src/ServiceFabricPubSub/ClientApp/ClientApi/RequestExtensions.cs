// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ClientApi.Router
{
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Request.
    /// </summary>
    public static partial class RequestExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='topicName'>
            /// </param>
            /// <param name='message'>
            /// </param>
            public static object Post(this IRequest operations, string tenantId, string topicName, string message)
            {
                return operations.PostAsync(tenantId, topicName, message).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='topicName'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAsync(this IRequest operations, string tenantId, string topicName, string message, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(tenantId, topicName, message, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='topicName'>
            /// </param>
            /// <param name='subscriberName'>
            /// </param>
            public static object Get(this IRequest operations, string tenantId, string topicName, string subscriberName)
            {
                return operations.GetAsync(tenantId, topicName, subscriberName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='topicName'>
            /// </param>
            /// <param name='subscriberName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IRequest operations, string tenantId, string topicName, string subscriberName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(tenantId, topicName, subscriberName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
